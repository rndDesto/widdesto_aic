{"version":3,"sources":["pages/index.js","layout/PageBase.js","App.js","serviceWorker.js","index.js"],"names":["Suspensed","Element","props","fallback","pageIndex","componentName","lazy","rootName","useStyles","makeStyles","listInline","display","flexDirection","padding","color","PageBase","children","classes","pathname","useLocation","AppBar","Toolbar","List","className","component","ListItem","button","Link","selected","to","ListItemText","defaultProps","rootPages","pages","map","val","index","exact","key","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAEMA,EAAY,SAACC,GAAD,OAAa,SAACC,GAC9B,OACE,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAACF,EAAYC,MAiBJE,EAZG,CAChB,CACEC,cAAeL,EAAUM,gBAAK,kBAAM,+DACpCC,SAAU,KAGZ,CACEF,cAAeL,EAAUM,gBAAK,kBAAM,wDACpCC,SAAU,c,gDCZRC,EAAYC,aAAW,iBAAO,CAClCC,WAAY,CACVC,QAAS,OACTC,cAAe,MACfC,QAAS,EACTC,MAAO,aAMLC,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACZC,EAAUT,IACRU,EAAaC,cAAbD,SACR,OACE,6BACE,sCACA,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,UAAWN,EAAQP,WAAYc,UAAU,OAC7C,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACF,UAAWG,IAAMC,SAAuB,MAAbV,EAAkBW,GAAG,KAC/D,kBAACC,EAAA,EAAD,cAEF,kBAACL,EAAA,EAAD,CAAUC,QAAM,EAACF,UAAWG,IAAMC,SAAuB,cAAbV,EAA0BW,GAAG,aACvE,kBAACC,EAAA,EAAD,qBAOR,6BAAMd,KAMZD,EAASgB,aAAe,CACtBf,SAAU,MAOGD,QC9CTiB,EAAYC,EAAMC,KAAK,SAACC,EAAKC,GACjC,OAAO,kBAAC,IAAD,CAAOZ,UAAWW,EAAI9B,cAAegC,OAAK,EAACC,IAAKF,EAAOG,KAAMJ,EAAI5B,cAgB3DiC,EAbH,WAEV,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACGR,MCHSS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.129405b1.chunk.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\r\n\r\nconst Suspensed = (Element) => (props) => {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Element {...props} />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nconst pageIndex = [\r\n  {\r\n    componentName: Suspensed(lazy(() => import('./Home'))),\r\n    rootName: '/'\r\n\r\n  },\r\n  {\r\n    componentName: Suspensed(lazy(() => import('./Favorite'))),\r\n    rootName: '/favorite'\r\n  },\r\n];\r\n\r\nexport default pageIndex;\r\n","import React from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { AppBar, Toolbar, List, ListItem, ListItemText, makeStyles } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  listInline: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    padding: 0,\r\n    color: 'white',\r\n  }\r\n}));\r\n\r\n\r\n\r\nconst PageBase = ({ children }) => {\r\n  const classes = useStyles();\r\n  const { pathname } = useLocation();\r\n  return (\r\n    <div>\r\n      <h1>header</h1>\r\n      <AppBar>\r\n        <Toolbar>\r\n          <List className={classes.listInline} component=\"nav\">\r\n            <ListItem button component={Link} selected={pathname === '/'} to=\"/\">\r\n              <ListItemText>Home</ListItemText>\r\n            </ListItem>\r\n            <ListItem button component={Link} selected={pathname === '/favorite'} to=\"/favorite\">\r\n              <ListItemText>Favorite</ListItemText>\r\n            </ListItem>\r\n          </List>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n\r\n      <div>{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nPageBase.defaultProps = {\r\n  children: null,\r\n};\r\n\r\nPageBase.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default PageBase;\r\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport pages from './pages';\nimport PageBase from './layout/PageBase';\n\nconst rootPages = pages.map( (val, index) => {\n  return <Route component={val.componentName} exact key={index} path={val.rootName} />;\n});\n\nconst App = () => {\n\n  return (\n    <BrowserRouter>\n      <PageBase>\n        <Switch>\n          {rootPages}\n        </Switch>\n      </PageBase>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}